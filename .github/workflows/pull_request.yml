name: "Pull Request"

on:
  pull_request:

jobs:
  validate_backend_module:
    uses: jamieastley/terraform_gh_actions/.github/workflows/validate_terraform_module.yml@v1.0.0
    name: "Validate backend module"
    with:
      terraform_version: ${{ vars.TERRAFORM_VERSION }}

  output_terraform_results:
    name: "Output Terraform results"
    runs-on: ubuntu-latest
    needs: [ validate_backend_module ]
    permissions:
      pull-requests: write
      issues: write
    steps:
      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          BACKEND_MODULE_FMT: ${{ needs.validate_backend_module.outputs.fmtOutcome }}
          BACKEND_MODULE_INIT: ${{ needs.validate_backend_module.outputs.initOutcome }}
          BACKEND_MODULE_VALIDATE: ${{ needs.validate_backend_module.outputs.validateOutcome }}
          BACKEND_MODULE_VALIDATE_OUTPUT: ${{ needs.validate_backend_module.outputs.validateOutput }}

        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const title = 'Terraform Results'
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes(title)
            })

            // 2. Prepare format of the comment
            const output = `## ${title}

            ### Module
            #### Terraform fmt üñå\`${{ env.BACKEND_MODULE_FMT }}\`
            #### Terraform init ‚öôÔ∏è\`${{ env.BACKEND_MODULE_INIT }}\`
            #### Terraform validate ü§ñ\`${{ env.BACKEND_MODULE_VALIDATE }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ env.BACKEND_MODULE_VALIDATE_OUTPUT }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }